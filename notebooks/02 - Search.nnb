{
    "cells": [
        {
            "language": "markdown",
            "source": [
                "# Search"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Basic search"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "import { FetchFhirClient } from \"@bonfhir/core/r4b\":\n\nconst client = new FetchFhirClient({\n    baseUrl: \"http://localhost:8103/fhir/R4/\",\n    auth: {\n        tokenUrl: \"http://localhost:8103/oauth2/token\",\n        clientId: \"f54370de-eaf3-4d81-a17e-24860f667912\",\n        clientSecret:\n        \"75d8e7d06bf9283926c51d5f461295ccf0b69128e983b6ecdd5a9c07506895de\",\n   },\n});\n\n// Execute a basic search\n// See https://hl7.org/fhir/search.html\nlet searchResult = await client.search(\"Patient\", search => search._count(2)._total(\"accurate\"));\n\nlet output = {\n    // Search match returns all the resources that where a match for the search\n    // See https://www.hl7.org/fhir/valueset-search-entry-mode.html\n    patients: searchResult.searchMatch().map(JSON.stringify),\n\n    // Total number of matching entities, regardless of pagination\n    total: searchResult.total,\n\n    nextPageUrl: searchResult.linkUrl(\"next\"),\n};\noutput;"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "{",
                                "  patients: [",
                                "    \u001b[32m'{\"name\":[{\"given\":[\"Miles\"],\"family\":\"Davis\"}],\"gender\":\"male\",\"resourceType\":\"Patient\",\"text\":{\"status\":\"generated\",\"div\":\"<div xmlns=\\\\\"http://www.w3.org/1999/xhtml\\\\\"><ul><li><span>Gender: </span>male</li><li><span>Name: </span><ul><li>Miles Davis</li></ul></li></ul></div>\"},\"id\":\"ddc0b271-5b6d-4a8e-80d5-ec7f9c398555\",\"meta\":{\"versionId\":\"53cae557-c4b7-4916-803c-4990eb7de186\",\"lastUpdated\":\"2023-07-26T13:07:57.896Z\"},\"managingOrganization\":{\"reference\":\"Organization/4cca86d1-e77f-459c-a510-dc2b0ece2949\",\"type\":\"Organization\",\"display\":\"Acme, Inc\"},\"maritalStatus\":{\"coding\":[{\"system\":\"http://terminology.hl7.org/CodeSystem/v3-MaritalStatus\",\"code\":\"D\",\"display\":\"Divorced\"}],\"text\":\"Divorced\"}}'\u001b[39m,",
                                "    \u001b[32m'{\"name\":[{\"given\":[\"John\"],\"family\":\"Coltrane\"}],\"gender\":\"male\",\"resourceType\":\"Patient\",\"text\":{\"status\":\"generated\",\"div\":\"<div xmlns=\\\\\"http://www.w3.org/1999/xhtml\\\\\"><ul><li><span>Gender: </span>male</li><li><span>Name: </span><ul><li>John Coltrane</li></ul></li></ul></div>\"},\"id\":\"f8a9e172-427d-4a2b-8090-03857a939334\",\"meta\":{\"versionId\":\"0c5d86ea-5eec-4c59-b5f0-ee290697adef\",\"lastUpdated\":\"2023-07-26T13:08:15.760Z\"}}'\u001b[39m",
                                "  ],",
                                "  total: \u001b[33m9\u001b[39m,",
                                "  nextPageUrl: \u001b[32m'http://localhost:8103/fhir/R4/Patient?_count=2&_offset=2&_total=accurate'\u001b[39m",
                                "}"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "## Managing pages\n\nGetting the next page from an existing search"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "if (!searchResult.linkUrl(\"next\")) {\n    console.log(\"No next page!\");\n    return;\n}\nsearchResult = await client.fetchPage(searchResult.linkUrl(\"next\"));\nconst output = {\n    // Search match returns all the resources that where a match for the search\n    // See https://www.hl7.org/fhir/valueset-search-entry-mode.html\n    patients: searchResult.searchMatch().map(JSON.stringify),\n\n    // Total number of matching entities, regardless of pagination\n    total: searchResult.total,\n\n    nextPageUrl: searchResult.linkUrl(\"next\"),\n};\noutput;"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "{",
                                "  patients: [",
                                "    \u001b[32m'{\"name\":[{\"given\":[\"Bill\"],\"family\":\"Evans\"}],\"gender\":\"male\",\"resourceType\":\"Patient\",\"text\":{\"status\":\"generated\",\"div\":\"<div xmlns=\\\\\"http://www.w3.org/1999/xhtml\\\\\"><ul><li><span>Gender: </span>male</li><li><span>Name: </span><ul><li>Bill Evans</li></ul></li></ul></div>\"},\"id\":\"ecceec23-2ef0-4822-acb8-9947475a62a5\",\"meta\":{\"versionId\":\"9784852a-b4f4-48f0-8329-c3e817018157\",\"lastUpdated\":\"2023-07-26T13:08:15.774Z\"}}'\u001b[39m,",
                                "    \u001b[32m'{\"name\":[{\"given\":[\"Nina\"],\"family\":\"Simone\"}],\"gender\":\"female\",\"resourceType\":\"Patient\",\"text\":{\"status\":\"generated\",\"div\":\"<div xmlns=\\\\\"http://www.w3.org/1999/xhtml\\\\\"><ul><li><span>Gender: </span>female</li><li><span>Name: </span><ul><li>Nina Simone</li></ul></li></ul></div>\"},\"id\":\"f503b5da-51c6-4b97-af9e-ce15bf9bfdd2\",\"meta\":{\"versionId\":\"2ff7934c-45bf-4f03-b59d-a204e615a05a\",\"lastUpdated\":\"2023-07-26T13:08:15.781Z\"}}'\u001b[39m",
                                "  ],",
                                "  total: \u001b[33m9\u001b[39m,",
                                "  nextPageUrl: \u001b[32m'http://localhost:8103/fhir/R4/Patient?_count=2&_offset=4&_total=accurate'\u001b[39m",
                                "}"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "If need be, you can iterate across pages"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const output = [];\nawait client.searchByPage(\n    \"Patient\",\n    search => search._count(2),\n    async (result) => {\n        output.push(result.searchMatch());\n    }\n);\n\noutput;"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "[",
                                "  [",
                                "    {",
                                "      name: \u001b[36m[Array]\u001b[39m,",
                                "      gender: \u001b[32m'male'\u001b[39m,",
                                "      resourceType: \u001b[32m'Patient'\u001b[39m,",
                                "      text: \u001b[36m[Object]\u001b[39m,",
                                "      id: \u001b[32m'ddc0b271-5b6d-4a8e-80d5-ec7f9c398555'\u001b[39m,",
                                "      meta: \u001b[36m[Object]\u001b[39m,",
                                "      managingOrganization: \u001b[36m[Object]\u001b[39m,",
                                "      maritalStatus: \u001b[36m[Object]\u001b[39m",
                                "    },",
                                "    {",
                                "      name: \u001b[36m[Array]\u001b[39m,",
                                "      gender: \u001b[32m'male'\u001b[39m,",
                                "      resourceType: \u001b[32m'Patient'\u001b[39m,",
                                "      text: \u001b[36m[Object]\u001b[39m,",
                                "      id: \u001b[32m'f8a9e172-427d-4a2b-8090-03857a939334'\u001b[39m,",
                                "      meta: \u001b[36m[Object]\u001b[39m",
                                "    }",
                                "  ],",
                                "  [",
                                "    {",
                                "      name: \u001b[36m[Array]\u001b[39m,",
                                "      gender: \u001b[32m'male'\u001b[39m,",
                                "      resourceType: \u001b[32m'Patient'\u001b[39m,",
                                "      text: \u001b[36m[Object]\u001b[39m,",
                                "      id: \u001b[32m'ecceec23-2ef0-4822-acb8-9947475a62a5'\u001b[39m,",
                                "      meta: \u001b[36m[Object]\u001b[39m",
                                "    },",
                                "    {",
                                "      name: \u001b[36m[Array]\u001b[39m,",
                                "      gender: \u001b[32m'female'\u001b[39m,",
                                "      resourceType: \u001b[32m'Patient'\u001b[39m,",
                                "      text: \u001b[36m[Object]\u001b[39m,",
                                "      id: \u001b[32m'f503b5da-51c6-4b97-af9e-ce15bf9bfdd2'\u001b[39m,",
                                "      meta: \u001b[36m[Object]\u001b[39m",
                                "    }",
                                "  ],",
                                "  [",
                                "    {",
                                "      name: \u001b[36m[Array]\u001b[39m,",
                                "      gender: \u001b[32m'male'\u001b[39m,",
                                "      resourceType: \u001b[32m'Patient'\u001b[39m,",
                                "      text: \u001b[36m[Object]\u001b[39m,",
                                "      id: \u001b[32m'b887b5b0-a320-4253-af7c-9625c8633c14'\u001b[39m,",
                                "      meta: \u001b[36m[Object]\u001b[39m",
                                "    },",
                                "    {",
                                "      name: \u001b[36m[Array]\u001b[39m,",
                                "      gender: \u001b[32m'male'\u001b[39m,",
                                "      resourceType: \u001b[32m'Patient'\u001b[39m,",
                                "      text: \u001b[36m[Object]\u001b[39m,",
                                "      id: \u001b[32m'e19e2f05-8e65-433f-b610-def2881d12c3'\u001b[39m,",
                                "      meta: \u001b[36m[Object]\u001b[39m",
                                "    }",
                                "  ],",
                                "  [",
                                "    {",
                                "      name: \u001b[36m[Array]\u001b[39m,",
                                "      gender: \u001b[32m'male'\u001b[39m,",
                                "      resourceType: \u001b[32m'Patient'\u001b[39m,",
                                "      text: \u001b[36m[Object]\u001b[39m,",
                                "      id: \u001b[32m'5dabd1d7-7a7a-498b-9728-5f3fac5b2299'\u001b[39m,",
                                "      meta: \u001b[36m[Object]\u001b[39m",
                                "    },",
                                "    {",
                                "      name: \u001b[36m[Array]\u001b[39m,",
                                "      gender: \u001b[32m'female'\u001b[39m,",
                                "      resourceType: \u001b[32m'Patient'\u001b[39m,",
                                "      text: \u001b[36m[Object]\u001b[39m,",
                                "      id: \u001b[32m'8f878d7c-0294-4409-a5af-e7f0e2e79482'\u001b[39m,",
                                "      meta: \u001b[36m[Object]\u001b[39m",
                                "    }",
                                "  ],",
                                "  [",
                                "    {",
                                "      name: \u001b[36m[Array]\u001b[39m,",
                                "      gender: \u001b[32m'male'\u001b[39m,",
                                "      resourceType: \u001b[32m'Patient'\u001b[39m,",
                                "      text: \u001b[36m[Object]\u001b[39m,",
                                "      id: \u001b[32m'e69e052d-b038-475b-b76b-064936a4f49a'\u001b[39m,",
                                "      meta: \u001b[36m[Object]\u001b[39m",
                                "    }",
                                "  ]",
                                "]"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "Or even retrieve all pages at once. *Be careful with this one, as it can lead to very high latency and memory consumption on large datasets.*"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "// The `_count` search parameters here sets the page size when retrieving. You should probably set it to a much higher number in real life.\nconst allPagesResult = await client.searchAllPages(\"Patient\", search => search._count(2));\n\nallPagesResult.searchMatch();"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "[",
                                "  {",
                                "    name: [",
                                "      \u001b[36m[Object]\u001b[39m",
                                "    ],",
                                "    gender: \u001b[32m'male'\u001b[39m,",
                                "    resourceType: \u001b[32m'Patient'\u001b[39m,",
                                "    text: {",
                                "      status: \u001b[32m'generated'\u001b[39m,",
                                "      div: \u001b[32m'<div xmlns=\"http://www.w3.org/1999/xhtml\"><ul><li><span>Gender: </span>male</li><li><span>Name: </span><ul><li>Miles Davis</li></ul></li></ul></div>'\u001b[39m",
                                "    },",
                                "    id: \u001b[32m'ddc0b271-5b6d-4a8e-80d5-ec7f9c398555'\u001b[39m,",
                                "    meta: {",
                                "      versionId: \u001b[32m'53cae557-c4b7-4916-803c-4990eb7de186'\u001b[39m,",
                                "      lastUpdated: \u001b[32m'2023-07-26T13:07:57.896Z'\u001b[39m",
                                "    },",
                                "    managingOrganization: {",
                                "      reference: \u001b[32m'Organization/4cca86d1-e77f-459c-a510-dc2b0ece2949'\u001b[39m,",
                                "      type: \u001b[32m'Organization'\u001b[39m,",
                                "      display: \u001b[32m'Acme, Inc'\u001b[39m",
                                "    },",
                                "    maritalStatus: {",
                                "      coding: \u001b[36m[Array]\u001b[39m,",
                                "      text: \u001b[32m'Divorced'\u001b[39m",
                                "    }",
                                "  },",
                                "  {",
                                "    name: [",
                                "      \u001b[36m[Object]\u001b[39m",
                                "    ],",
                                "    gender: \u001b[32m'male'\u001b[39m,",
                                "    resourceType: \u001b[32m'Patient'\u001b[39m,",
                                "    text: {",
                                "      status: \u001b[32m'generated'\u001b[39m,",
                                "      div: \u001b[32m'<div xmlns=\"http://www.w3.org/1999/xhtml\"><ul><li><span>Gender: </span>male</li><li><span>Name: </span><ul><li>John Coltrane</li></ul></li></ul></div>'\u001b[39m",
                                "    },",
                                "    id: \u001b[32m'f8a9e172-427d-4a2b-8090-03857a939334'\u001b[39m,",
                                "    meta: {",
                                "      versionId: \u001b[32m'0c5d86ea-5eec-4c59-b5f0-ee290697adef'\u001b[39m,",
                                "      lastUpdated: \u001b[32m'2023-07-26T13:08:15.760Z'\u001b[39m",
                                "    }",
                                "  },",
                                "  {",
                                "    name: [",
                                "      \u001b[36m[Object]\u001b[39m",
                                "    ],",
                                "    gender: \u001b[32m'male'\u001b[39m,",
                                "    resourceType: \u001b[32m'Patient'\u001b[39m,",
                                "    text: {",
                                "      status: \u001b[32m'generated'\u001b[39m,",
                                "      div: \u001b[32m'<div xmlns=\"http://www.w3.org/1999/xhtml\"><ul><li><span>Gender: </span>male</li><li><span>Name: </span><ul><li>Bill Evans</li></ul></li></ul></div>'\u001b[39m",
                                "    },",
                                "    id: \u001b[32m'ecceec23-2ef0-4822-acb8-9947475a62a5'\u001b[39m,",
                                "    meta: {",
                                "      versionId: \u001b[32m'9784852a-b4f4-48f0-8329-c3e817018157'\u001b[39m,",
                                "      lastUpdated: \u001b[32m'2023-07-26T13:08:15.774Z'\u001b[39m",
                                "    }",
                                "  },",
                                "  {",
                                "    name: [",
                                "      \u001b[36m[Object]\u001b[39m",
                                "    ],",
                                "    gender: \u001b[32m'female'\u001b[39m,",
                                "    resourceType: \u001b[32m'Patient'\u001b[39m,",
                                "    text: {",
                                "      status: \u001b[32m'generated'\u001b[39m,",
                                "      div: \u001b[32m'<div xmlns=\"http://www.w3.org/1999/xhtml\"><ul><li><span>Gender: </span>female</li><li><span>Name: </span><ul><li>Nina Simone</li></ul></li></ul></div>'\u001b[39m",
                                "    },",
                                "    id: \u001b[32m'f503b5da-51c6-4b97-af9e-ce15bf9bfdd2'\u001b[39m,",
                                "    meta: {",
                                "      versionId: \u001b[32m'2ff7934c-45bf-4f03-b59d-a204e615a05a'\u001b[39m,",
                                "      lastUpdated: \u001b[32m'2023-07-26T13:08:15.781Z'\u001b[39m",
                                "    }",
                                "  },",
                                "  {",
                                "    name: [",
                                "      \u001b[36m[Object]\u001b[39m",
                                "    ],",
                                "    gender: \u001b[32m'male'\u001b[39m,",
                                "    resourceType: \u001b[32m'Patient'\u001b[39m,",
                                "    text: {",
                                "      status: \u001b[32m'generated'\u001b[39m,",
                                "      div: \u001b[32m'<div xmlns=\"http://www.w3.org/1999/xhtml\"><ul><li><span>Gender: </span>male</li><li><span>Name: </span><ul><li>Oscar Petterson</li></ul></li></ul></div>'\u001b[39m",
                                "    },",
                                "    id: \u001b[32m'b887b5b0-a320-4253-af7c-9625c8633c14'\u001b[39m,",
                                "    meta: {",
                                "      versionId: \u001b[32m'3997d2f7-4fe5-4f55-847b-31b7030e21b8'\u001b[39m,",
                                "      lastUpdated: \u001b[32m'2023-07-26T13:08:15.788Z'\u001b[39m",
                                "    }",
                                "  },",
                                "  {",
                                "    name: [",
                                "      \u001b[36m[Object]\u001b[39m",
                                "    ],",
                                "    gender: \u001b[32m'male'\u001b[39m,",
                                "    resourceType: \u001b[32m'Patient'\u001b[39m,",
                                "    text: {",
                                "      status: \u001b[32m'generated'\u001b[39m,",
                                "      div: \u001b[32m'<div xmlns=\"http://www.w3.org/1999/xhtml\"><ul><li><span>Gender: </span>male</li><li><span>Name: </span><ul><li>John Coltrane</li></ul></li></ul></div>'\u001b[39m",
                                "    },",
                                "    id: \u001b[32m'e19e2f05-8e65-433f-b610-def2881d12c3'\u001b[39m,",
                                "    meta: {",
                                "      versionId: \u001b[32m'ab058b96-8430-45d4-891d-00a61c74cd19'\u001b[39m,",
                                "      lastUpdated: \u001b[32m'2023-07-26T13:08:15.802Z'\u001b[39m",
                                "    }",
                                "  },",
                                "  {",
                                "    name: [",
                                "      \u001b[36m[Object]\u001b[39m",
                                "    ],",
                                "    gender: \u001b[32m'male'\u001b[39m,",
                                "    resourceType: \u001b[32m'Patient'\u001b[39m,",
                                "    text: {",
                                "      status: \u001b[32m'generated'\u001b[39m,",
                                "      div: \u001b[32m'<div xmlns=\"http://www.w3.org/1999/xhtml\"><ul><li><span>Gender: </span>male</li><li><span>Name: </span><ul><li>Bill Evans</li></ul></li></ul></div>'\u001b[39m",
                                "    },",
                                "    id: \u001b[32m'5dabd1d7-7a7a-498b-9728-5f3fac5b2299'\u001b[39m,",
                                "    meta: {",
                                "      versionId: \u001b[32m'75c6650d-2623-489e-ae10-66dfc886f1e0'\u001b[39m,",
                                "      lastUpdated: \u001b[32m'2023-07-26T13:08:15.813Z'\u001b[39m",
                                "    }",
                                "  },",
                                "  {",
                                "    name: [",
                                "      \u001b[36m[Object]\u001b[39m",
                                "    ],",
                                "    gender: \u001b[32m'female'\u001b[39m,",
                                "    resourceType: \u001b[32m'Patient'\u001b[39m,",
                                "    text: {",
                                "      status: \u001b[32m'generated'\u001b[39m,",
                                "      div: \u001b[32m'<div xmlns=\"http://www.w3.org/1999/xhtml\"><ul><li><span>Gender: </span>female</li><li><span>Name: </span><ul><li>Nina Simone</li></ul></li></ul></div>'\u001b[39m",
                                "    },",
                                "    id: \u001b[32m'8f878d7c-0294-4409-a5af-e7f0e2e79482'\u001b[39m,",
                                "    meta: {",
                                "      versionId: \u001b[32m'dcdfa92e-e019-4fa9-9a60-d523a026714d'\u001b[39m,",
                                "      lastUpdated: \u001b[32m'2023-07-26T13:08:15.821Z'\u001b[39m",
                                "    }",
                                "  },",
                                "  {",
                                "    name: [",
                                "      \u001b[36m[Object]\u001b[39m",
                                "    ],",
                                "    gender: \u001b[32m'male'\u001b[39m,",
                                "    resourceType: \u001b[32m'Patient'\u001b[39m,",
                                "    text: {",
                                "      status: \u001b[32m'generated'\u001b[39m,",
                                "      div: \u001b[32m'<div xmlns=\"http://www.w3.org/1999/xhtml\"><ul><li><span>Gender: </span>male</li><li><span>Name: </span><ul><li>Oscar Petterson</li></ul></li></ul></div>'\u001b[39m",
                                "    },",
                                "    id: \u001b[32m'e69e052d-b038-475b-b76b-064936a4f49a'\u001b[39m,",
                                "    meta: {",
                                "      versionId: \u001b[32m'5bcfac12-17b3-4839-8b67-b0280b4a0045'\u001b[39m,",
                                "      lastUpdated: \u001b[32m'2023-07-26T13:08:15.830Z'\u001b[39m",
                                "    }",
                                "  }",
                                "]"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "## Includes and RevIncludes\n\nThe search navigator can resolve [`_include`](https://hl7.org/fhir/search.html#include) and [`_revinclude`](https://hl7.org/fhir/search.html#_revinclude) within the resources themselves."
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const patientSearch = await client.search(\"Patient\", search => search._include(\"Patient\", \"organization\"));\n\nconst firstPatient = patientSearch.searchMatch()[0]!;\n// When obtained from a search, resources have additional methods to resolve included resouces inline.\nconst organization = firstPatient.managingOrganization.included();\norganization;"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "{",
                                "  name: \u001b[32m'Acme, Inc'\u001b[39m,",
                                "  resourceType: \u001b[32m'Organization'\u001b[39m,",
                                "  text: {",
                                "    status: \u001b[32m'generated'\u001b[39m,",
                                "    div: \u001b[32m'<div xmlns=\"http://www.w3.org/1999/xhtml\"><ul><li><span>Name: </span>Acme, Inc</li></ul></div>'\u001b[39m",
                                "  },",
                                "  id: \u001b[32m'4cca86d1-e77f-459c-a510-dc2b0ece2949'\u001b[39m,",
                                "  meta: {",
                                "    versionId: \u001b[32m'ed4dc76f-3c83-4992-a91f-55f2ed37b2b8'\u001b[39m,",
                                "    lastUpdated: \u001b[32m'2023-07-26T13:07:57.875Z'\u001b[39m",
                                "  }",
                                "}"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "// They can also be searched / extracted from the search itself\nconst organizationReference = firstPatient.managingOrganization;\nconst foundOrgInBundle = patientSearch.reference(organizationReference);\nfoundOrgInBundle;"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "{",
                                "  name: \u001b[32m'Acme, Inc'\u001b[39m,",
                                "  resourceType: \u001b[32m'Organization'\u001b[39m,",
                                "  text: {",
                                "    status: \u001b[32m'generated'\u001b[39m,",
                                "    div: \u001b[32m'<div xmlns=\"http://www.w3.org/1999/xhtml\"><ul><li><span>Name: </span>Acme, Inc</li></ul></div>'\u001b[39m",
                                "  },",
                                "  id: \u001b[32m'4cca86d1-e77f-459c-a510-dc2b0ece2949'\u001b[39m,",
                                "  meta: {",
                                "    versionId: \u001b[32m'ed4dc76f-3c83-4992-a91f-55f2ed37b2b8'\u001b[39m,",
                                "    lastUpdated: \u001b[32m'2023-07-26T13:07:57.875Z'\u001b[39m",
                                "  }",
                                "}"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "Same is true for `_revinclude`, except it's resolve from the root. Let's try."
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "import { build, codeableConcept, reference } from \"@bonfhir/core/r4b\";\n\nconst account = build(\"Account\", {\n  status: \"active\",\n  type: codeableConcept({\n    system: \"http://terminology.hl7.org/CodeSystem/v3-ActCode\",\n    code: \"PBILLACCT\",\n    display: \"patient billing account\"\n  }),\n  subject: [reference(firstPatient)]\n});\naccount = await client.save(account);\n\nconst patientSearch = await client.search(\"Patient\", search => search._revinclude(\"Account\", \"patient\"));\nconst firstPatient = patientSearch.searchMatch()[0]!;\n// The `revIncluded` function needs a lambda that points to the reverse-included reference from the source resource.\nconst foundAccount = firstPatient.revIncluded<Account>(account => account.subject);\nfoundAccount;\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "[",
                                "  {",
                                "    status: \u001b[32m'active'\u001b[39m,",
                                "    type: {",
                                "      coding: \u001b[36m[Array]\u001b[39m,",
                                "      text: \u001b[32m'patient billing account'\u001b[39m",
                                "    },",
                                "    subject: [",
                                "      \u001b[36m[Object]\u001b[39m",
                                "    ],",
                                "    resourceType: \u001b[32m'Account'\u001b[39m,",
                                "    text: {",
                                "      status: \u001b[32m'generated'\u001b[39m,",
                                "      div: \u001b[32m'<div xmlns=\"http://www.w3.org/1999/xhtml\"><ul><li><span>Status: </span>active</li><li><span>Subject: </span><ul><li>Miles Davis</li></ul></li><li><span>Type: </span>patient billing account</li></ul></div>'\u001b[39m",
                                "    },",
                                "    id: \u001b[32m'd2e385d6-6236-49d6-8ba2-65d50d87896a'\u001b[39m,",
                                "    meta: {",
                                "      versionId: \u001b[32m'51ca4825-f31d-4ece-863a-f3ee8c61f59e'\u001b[39m,",
                                "      lastUpdated: \u001b[32m'2023-07-26T13:24:21.179Z'\u001b[39m",
                                "    }",
                                "  }",
                                "]"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "By using the `BundleNavigator` in search results (which is what is returned from `search` methods in the client), indexing is done automatically, so you never need to memoize or build other dictionnaries externally.\nIndexes are built on-demand, on-the-fly, so it is cheap and you can safely return it in any circumstances."
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Additional features"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "// `searchOne` is a convenience method to get only one searchMatch - very convenient when you want to retrieve a single resource by id, but add included resources\nconst patientById = await client.searchOne(\"Patient\", search => search._id(\"ddc0b271-5b6d-4a8e-80d5-ec7f9c398555\")._include(\"Patient\", \"organization\")._revinclude(\"Account\", \"patient\"));\n\n// `.bundle` give access to the underlying bundle\nconst searchResult = await client.search(\"Patient\", search => search.name(\"Miles Davis\"));\nsearchResult.bundle;"
            ],
            "outputs": []
        }
    ]
}